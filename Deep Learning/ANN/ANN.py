# -*- coding: utf-8 -*-
"""ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NDfNzXb7lSH4wXVu700xlxySOYeKYoIE
"""

#importing dataset
import numpy as np
import pandas as pd
import tensorflow as tf


#importing dataset
dataset = pd.read_csv('Churn_Modelling.csv')
x = dataset.iloc[:, 3:-1].values
y = dataset.iloc[:, -1].values
#print(x)
#print(y)


#labelencodign
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
x[:, 2] = le.fit_transform(x[:, 2])


#onehot encoding
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1])], remainder='passthrough')
x = np.array(ct.fit_transform(x))
#print(x)


#splitting dataset
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)


#feature scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)



#creating ANN model
#making object
ann= tf.keras.models.Sequential()
#adding i/p and first hidden layer
ann.add(tf.keras.layers.Dense(units=6,activation='relu'))
#adding second hidden layer
ann.add(tf.keras.layers.Dense(units=6,activation='relu'))
#o/p layer
ann.add(tf.keras.layers.Dense(units=1,activation='sigmoid'))



#training
#compilation
ann.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
#training
ann.fit(x_train, y_train, batch_size = 32, epochs = 50)


#pridicting single value
#predict probability
#we can define boundry as 0.5
temp= ann.predict(sc.transform([[1, 0, 0, 600, 1, 40, 3, 60000, 2, 1, 1, 50000]]))
if temp>0.5:
  print('customer will stay')
else:
  print('customer will not stay!')

#testing model
y_pred = ann.predict(x_test)
y_pred = (y_pred > 0.5)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))


#accurecy score
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)