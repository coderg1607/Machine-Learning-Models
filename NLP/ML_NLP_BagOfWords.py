# -*- coding: utf-8 -*-
"""ML-NLP-BagOfWords.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10eTop061Myq7K7rx7DbfnuW5qfv8W5qy
"""

#importing libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd


#dataset
#here by just changing delimeter we can open csv
#tsv stands for tab seprated values
#quoting =3 to avoid ""
dataset = pd.read_csv('Restaurant_Reviews.tsv', delimiter = '\t', quoting = 3)


#cleaning text dataset
import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
corpus = []
for i in range(0, 1000):
  review = re.sub('[^a-zA-Z]', ' ', dataset['Review'][i])
  review = review.lower()
  review = review.split()
  ps = PorterStemmer()
  all_stopwords = stopwords.words('english')
  all_stopwords.remove('not')
  review = [ps.stem(word) for word in review if not word in set(all_stopwords)]
  review = ' '.join(review)
  corpus.append(review)
#print(corpus)


#creating model
from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 1500)
X = cv.fit_transform(corpus).toarray()
y = dataset.iloc[:, -1].values


#then we use Naive bayes model to classify review into +ve or -ve
#spliting dataset
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)


#classification model
from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X_train, y_train)


#pridiction
y_pred = classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))


#confusion matrix
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)


#single review prediction-optional
#new_review = 'I love this restaurant so much'
#new_review = re.sub('[^a-zA-Z]', ' ', new_review)
#new_review = new_review.lower()
#new_review = new_review.split()
#ps = PorterStemmer()
#all_stopwords = stopwords.words('english')
#all_stopwords.remove('not')
#new_review = [ps.stem(word) for word in new_review if not word in set(all_stopwords)]
#new_review = ' '.join(new_review)
#new_corpus = [new_review]
#new_X_test = cv.transform(new_corpus).toarray()
#new_y_pred = classifier.predict(new_X_test)
#print(new_y_pred)