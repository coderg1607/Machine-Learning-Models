# -*- coding: utf-8 -*-
"""ML-0-Datapreprocesing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ef6oQANOB_W5-8v2jdELRK98ndNc4Q_E
"""

#importing libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd



#importing datasets

#here x is matrix of fiture and y is a dependent variable vector
#here we are using iloc function for extract data(iloc=index location)
dataset = pd.read_csv('Data.csv')
X = dataset.iloc[:, :-1].values
Y = dataset.iloc[:, -1].values
#print(X)
#print(Y)



#taking care of missing data

#here we are repacing missing values(nan) with average
from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan, strategy='mean')#here we are making an object
imputer.fit(X[:, 1:3])                                         #fit method will find missing values
X[:, 1:3] = imputer.transform(X[:, 1:3])                       #compute missing values 
#print(X)



#encoding categorical data-independent variables

#here we will do one hot encoding-consist of column into binary vectors
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
#syntax: columnTransformer(tranforms=['what kind of tran','type','on which column'])
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder='passthrough')#obj
X = np.array(ct.fit_transform(X))#combination of both methods
#print(X)



#encoding categorical data-dependent varible

#here we will do label encoding
#yes->1 , no->0
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
Y= le.fit_transform(Y)
#print(Y)




#spliting dataset

#train set->to train our ML model
#test set->evaluate performance of our model
#text_size indicate the ration of division
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 1)
#print(X_train)
#print(X_test)
#print(Y_train)
#print(Y_test)



#feature scaling

#it will alow to pull our data ino same range
#2 types:standardisation and normalisation
#here will use standardisation because it will work any type of data distributation
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train[:, 3:] = sc.fit_transform(X_train[:, 3:])
X_test[:, 3:] = sc.transform(X_test[:, 3:])
#print(X_train)
#print(X_test)